/* eslint-disable camelcase */
import { normal_ask } from '.';
import { admin_account } from '../admin-accounts';
import { balance } from '../balances';
import { delta_amount } from '../delta-amounts';
import { insufficient_balance } from '../insufficient-balances';
import { normal_ask_history } from '../normal-ask-histories';
import { normal_ask_setting } from '../normal-ask-settings';
import { normal_bid_history } from '../normal-bid-histories';
import { single_price_normal_settlement } from '../single-price-normal-settlements';
import { student_account } from '../student-accounts';
import { DeltaAmount, NormalAsk, NormalAskSetting, proto } from '@local/common';
import * as functions from 'firebase-functions';

const f = functions.region('asia-northeast1');
module.exports.primaryNormalAsk = f.pubsub
  .schedule('0 12 * * *')
  .timeZone('Asia/Tokyo') // Users can choose timezone - default is America/Los_Angeles
  .onRun(async () => {
    const threshold = 2;
    const now = new Date();
    const adminAccount = await admin_account.getByName('admin');
    const students = await student_account.list();
    const contracts = await single_price_normal_settlement.listDescDate();

    if (Math.abs(contracts[0].price - contracts[1].price) <= threshold) {
      console.log('No Market Operation');
      const todayAsks = await normal_ask_history.getToday();
      const todayAsksAmount = todayAsks.reduce((prev, current) => prev + current.amount, 0);
      const yesterdayAsks = await normal_ask_history.getYesterday();
      const yesterdayAsksAmount = yesterdayAsks.reduce((prev, current) => prev + current.amount, 0);
      const deltaAsksAmount = todayAsksAmount - yesterdayAsksAmount;

      const todayBids = await normal_bid_history.getToday();
      const todayBidsAmount = todayBids.reduce((prev, current) => prev + current.amount, 0);
      const yesterdayBids = await normal_bid_history.getYesterday();
      const yesterdayBidsAmount = yesterdayBids.reduce((prev, current) => prev + current.amount, 0);
      const deltaBidsAmount = todayBidsAmount - yesterdayBidsAmount;
      await delta_amount.create(
        new DeltaAmount({
          asks_amount: deltaAsksAmount.toString(),
          bids_amount: deltaBidsAmount.toString(),
        }),
      );
    } else {
    }
  });
